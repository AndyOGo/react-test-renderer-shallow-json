{"version":3,"file":"index.modern.mjs","sources":["../src/types.ts","../src/getDisplayName.ts","../src/mapProps.ts","../src/mapChild.ts","../src/mapChildren.ts","../src/mapTree.ts","../src/dive.ts","../src/mapTrees.ts","../src/shallowJSON.ts"],"sourcesContent":["import type {\n  Context,\n  ElementType,\n  ForwardRefExoticComponent,\n  ForwardRefRenderFunction,\n  NamedExoticComponent,\n  Key,\n  LegacyRef,\n} from 'react';\nimport type {\n  ReactTestRendererJSON,\n  ReactTestRendererTree,\n} from 'react-test-renderer';\n\nexport type ReactTestRendererJSONFixed = Omit<\n  ReactTestRendererJSON,\n  'children'\n> & {\n  children: null | ReactTestRendererJSONFixed | ReactTestRendererNodeFixed[];\n};\nexport type ReactTestRendererNodeFixed = ReactTestRendererJSONFixed | string;\n\ntype NamedExoticComponentFixed = Pick<\n  NamedExoticComponent,\n  '$$typeof' | 'displayName'\n> & {\n  type?: ReactTestRendererTreeFixed['type'];\n};\n\ntype ContextComponent = Pick<NamedExoticComponent, '$$typeof'> & {\n  type?: ReactTestRendererTreeFixed['type'];\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  _context: Pick<Context<unknown>, 'displayName'>;\n};\n\ntype ForwardRefComponent = Pick<\n  ForwardRefExoticComponent<unknown>,\n  '$$typeof' | 'displayName'\n> & {\n  render: ForwardRefRenderFunction<unknown>;\n};\n\nexport type ReactTestRendererTreeFixed = Omit<\n  ReactTestRendererTree,\n  'type' | 'props' | 'children' | 'rendered' | 'instance'\n> & {\n  type:\n    | string\n    | symbol\n    | ElementType\n    | NamedExoticComponentFixed\n    | ContextComponent\n    | ForwardRefComponent;\n  props: ReactTestRendererTreeProps;\n  rendered:\n    | null\n    | ReactTestRendererTreeNodeFixed\n    | ReactTestRendererTreeNodeFixed[];\n};\n\nexport type ReactTestRendererTreeNodeFixed =\n  | string\n  | ReactTestRendererTreeFixed;\n\ntype ReactTestRendererTreeProps = {\n  children?: ReactTestRendererTreeChildren;\n  [propName: string]: unknown;\n};\n\ntype ReactTestRendererTreeChildren =\n  | ReactTestRendererTreeChild\n  | ReactTestRendererTreeChild[];\n\nexport type ReactTestRendererTreeChild =\n  | string\n  | {\n      props: ReactTestRendererTreeProps;\n      type: string | ElementType;\n      key: null | Key;\n      ref?: LegacyRef<unknown>;\n    };\n\nexport function isNamedExoticComponentType(\n  type: ReactTestRendererTreeFixed['type']\n): type is NamedExoticComponentFixed {\n  return !!type && typeof type === 'object' && '$$typeof' in type;\n}\n\nexport function isContext(\n  type: ReactTestRendererTreeFixed['type']\n): type is ContextComponent {\n  return (\n    isNamedExoticComponentType(type) &&\n    (type.$$typeof === Symbol.for('react.context') ||\n      type.$$typeof === Symbol.for('react.provider'))\n  );\n}\n\nexport function isForwardRef(\n  type: ReactTestRendererTreeFixed['type']\n): type is ForwardRefComponent {\n  return (\n    isNamedExoticComponentType(type) &&\n    type.$$typeof === Symbol.for('react.forward_ref')\n  );\n}\n","import {\n  ReactTestRendererTreeFixed,\n  isContext,\n  isForwardRef,\n  isNamedExoticComponentType,\n} from './types';\n\nconst elementSymbolMap: Readonly<Record<symbol, string>> = {\n  [Symbol.for('react.fragment')]: 'React.Fragment',\n  [Symbol.for('react.memo')]: 'Memo',\n  [Symbol.for('react.context')]: 'Consumer',\n  [Symbol.for('react.provider')]: 'Provider',\n  [Symbol.for('react.forward_ref')]: 'ForwardRef',\n};\n\nfunction getSymbol($$typeof?: symbol) {\n  if (!$$typeof || !($$typeof in elementSymbolMap)) {\n    return '';\n  }\n\n  return elementSymbolMap[$$typeof];\n}\n\nfunction prependSymbol(displayName: string, $$typeof?: symbol): string {\n  if (!$$typeof || !($$typeof in elementSymbolMap)) {\n    return displayName;\n  }\n\n  return `${getSymbol($$typeof)}${displayName}`;\n}\n\nfunction appendSymbol(displayName: string, $$typeof?: symbol): string {\n  if (!$$typeof || !($$typeof in elementSymbolMap)) {\n    return displayName;\n  }\n\n  return `${displayName}.${getSymbol($$typeof)}`;\n}\n\nexport function getDisplayName(\n  type: ReactTestRendererTreeFixed['type'],\n  fallback = 'UNDEFINED'\n): string {\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  if (typeof type === 'symbol') {\n    return type in elementSymbolMap ? elementSymbolMap[type] : fallback;\n  }\n\n  if (isContext(type)) {\n    return (\n      appendSymbol(type._context.displayName || 'Context', type.$$typeof) ||\n      fallback\n    );\n  }\n\n  if (isForwardRef(type)) {\n    return (\n      type.displayName ||\n      prependSymbol(\n        type.render ? getDisplayName(type.render, '') : '',\n        type.$$typeof\n      ) ||\n      fallback\n    );\n  }\n\n  if (isNamedExoticComponentType(type)) {\n    if (type.$$typeof === Symbol.for('react.forward_ref')) {\n      console.log(type);\n    }\n    return (\n      type.displayName ||\n      prependSymbol(\n        type.type ? getDisplayName(type.type) : '',\n        type.$$typeof\n      ) ||\n      fallback\n    );\n  }\n\n  return type.displayName || type.name || fallback;\n}\n","import type { ReactTestRendererTreeFixed } from './types';\n\nexport function mapProps(props: ReactTestRendererTreeFixed['props']) {\n  const { children, ...propsWithoutChildren } = props;\n\n  return propsWithoutChildren;\n}\n","import type {\n  ReactTestRendererNodeFixed,\n  ReactTestRendererTreeChild,\n} from './types';\nimport { getDisplayName } from './getDisplayName';\nimport { mapProps } from './mapProps';\nimport { mapChildren } from './mapChildren';\n\nexport function mapChild(\n  child: ReactTestRendererTreeChild\n): ReactTestRendererNodeFixed {\n  if (typeof child === 'string') {\n    return child;\n  }\n\n  const { key, ref } = child;\n\n  const json = {\n    type: getDisplayName(child.type),\n    props: mapProps({\n      ...child.props,\n      ...(key && { key }),\n      ...(ref && { ref }),\n    }),\n    children: mapChildren(child.props),\n  };\n\n  Object.defineProperty(json, '$$typeof', {\n    value: Symbol.for('react.test.json'),\n  });\n\n  return json;\n}\n","import type {\n  ReactTestRendererJSONFixed,\n  ReactTestRendererTreeFixed,\n} from './types';\nimport { mapChild } from './mapChild';\n\nexport function mapChildren(\n  props: ReactTestRendererTreeFixed['props']\n): ReactTestRendererJSONFixed['children'] {\n  const { children } = props;\n\n  if (!children) {\n    return null;\n  }\n\n  if (!Array.isArray(children)) {\n    return [mapChild(children)];\n  }\n\n  return children.map(mapChild);\n}\n","import type { ReactTestRendererNode } from 'react-test-renderer';\nimport type { ReactTestRendererTreeNodeFixed } from './types';\nimport { getDisplayName } from './getDisplayName';\nimport { mapProps } from './mapProps';\nimport { mapChildren } from './mapChildren';\nimport { mapTrees } from './mapTrees';\n\nexport function mapTree(\n  tree: ReactTestRendererTreeNodeFixed,\n  depth = 1\n): ReactTestRendererNode {\n  if (typeof tree === 'string') {\n    return tree;\n  }\n\n  const json = {\n    type: getDisplayName(tree.type),\n    props: mapProps(tree.props),\n    children: depth ? mapTrees(tree.rendered, depth) : mapChildren(tree.props),\n  };\n\n  Object.defineProperty(json, '$$typeof', {\n    value: Symbol.for('react.test.json'),\n  });\n\n  return json as ReactTestRendererNode;\n}\n","import type { ReactTestRendererTreeNodeFixed } from './types';\n\nexport function dive(\n  tree: ReactTestRendererTreeNodeFixed,\n  depth: number\n): number {\n  return typeof tree === 'string' || tree.nodeType === 'host'\n    ? depth\n    : depth - 1;\n}\n","import type { ReactTestRendererJSON } from 'react-test-renderer';\nimport type { ReactTestRendererTreeFixed } from './types';\nimport { mapTree } from './mapTree';\nimport { dive } from './dive';\n\nexport function mapTrees(\n  trees: ReactTestRendererTreeFixed['rendered'],\n  depth = 1\n): ReactTestRendererJSON['children'] {\n  if (!trees) {\n    return null;\n  }\n\n  if (Array.isArray(trees)) {\n    return trees.map((tree) => mapTree(tree, dive(tree, depth)));\n  }\n\n  return [mapTree(trees, dive(trees, depth))];\n}\n","import type { ReactTestRendererJSON } from 'react-test-renderer';\nimport { ReactTestRendererTreeFixed } from './types';\nimport { getDisplayName } from './getDisplayName';\nimport { mapProps } from './mapProps';\nimport { mapTrees } from './mapTrees';\nimport { dive } from './dive';\n\nexport function shallowJSON(\n  trees: null | ReactTestRendererTreeFixed | ReactTestRendererTreeFixed[],\n  depth = 1\n): null | ReactTestRendererJSON {\n  if (!trees) {\n    return null;\n  }\n\n  if (Array.isArray(trees)) {\n    return trees.map((tree) => {\n      return mapShallowTree(tree, depth);\n    }) as unknown as ReactTestRendererJSON;\n  }\n\n  return mapShallowTree(trees, depth);\n}\n\nfunction mapShallowTree(\n  tree: null | ReactTestRendererTreeFixed,\n  depth = 1\n): null | ReactTestRendererJSON {\n  if (!tree) {\n    return null;\n  }\n\n  const shallowJson: ReactTestRendererJSON = {\n    type: getDisplayName(tree.type),\n    props: mapProps(tree.props),\n    children: mapTrees(tree.rendered, dive(tree, depth)),\n  };\n\n  Object.defineProperty(shallowJson, '$$typeof', {\n    value: Symbol.for('react.test.json'),\n  });\n\n  return shallowJson;\n}\n"],"names":["isNamedExoticComponentType","type","elementSymbolMap","Symbol","for","getSymbol","$$typeof","prependSymbol","displayName","getDisplayName","fallback","isContext","_context","isForwardRef","render","console","log","name","_excluded","mapProps","props","_objectWithoutPropertiesLoose","mapChild","child","key","ref","json","_extends","children","mapChildren","Object","defineProperty","value","Array","isArray","map","mapTree","tree","depth","mapTrees","rendered","dive","nodeType","trees","shallowJSON","mapShallowTree","shallowJson"],"mappings":"SAkFgBA,EACdC,GAEA,QAASA,GAAwB,iBAATA,GAAqB,aAAcA,CAC7D,CC/EA,MAAMC,EAAqD,CACzD,CAACC,OAAOC,IAAI,mBAAoB,iBAChC,CAACD,OAAOC,IAAI,eAAgB,OAC5B,CAACD,OAAOC,IAAI,kBAAmB,WAC/B,CAACD,OAAOC,IAAI,mBAAoB,WAChC,CAACD,OAAOC,IAAI,sBAAuB,cAGrC,SAASC,EAAUC,GACjB,OAAKA,GAAcA,KAAYJ,EAIxBA,EAAiBI,GAHf,EAIX,CAEA,SAASC,EAAcC,EAAqBF,GAC1C,OAAKA,GAAcA,KAAYJ,EAIxB,GAAGG,EAAUC,KAAYE,IAHvBA,CAIX,UAUgBC,EACdR,EACAS,EAAW,aAEX,MAAoB,iBAATT,EACFA,EAGW,iBAATA,EACFA,KAAQC,EAAmBA,EAAiBD,GAAQS,EDwCzD,SACJT,GAEA,OACED,EAA2BC,KAC1BA,EAAKK,WAAaH,OAAOC,IAAI,kBAC5BH,EAAKK,WAAaH,OAAOC,IAAI,kBAEnC,CC7CMO,CAAUV,IApBMO,EAsBHP,EAAKW,SAASJ,aAAe,YAtBLF,EAsBgBL,EAAKK,WArB3CA,KAAYJ,EAIxB,GAAGM,KAAeH,EAAUC,KAH1BE,IAqBLE,GD4CU,SACdT,GAEA,OACED,EAA2BC,IAC3BA,EAAKK,WAAaH,OAAOC,IAAI,oBAEjC,CC/CMS,CAAaZ,GAEbA,EAAKO,aACLD,EACEN,EAAKa,OAASL,EAAeR,EAAKa,OAAQ,IAAM,GAChDb,EAAKK,WAEPI,EAIAV,EAA2BC,IACzBA,EAAKK,WAAaH,OAAOC,IAAI,sBAC/BW,QAAQC,IAAIf,GAGZA,EAAKO,aACLD,EACEN,EAAKA,KAAOQ,EAAeR,EAAKA,MAAQ,GACxCA,EAAKK,WAEPI,GAIGT,EAAKO,aAAeP,EAAKgB,MAAQP,EApD1C,IAAsBF,EAAqBF,CAqD3C,qOClFA,MAAAY,EAAA,CAAA,qBAAgBC,EAASC,GAGvB,yIAFyCC,CAAKD,EAAKF,EAGrD,CCEgB,SAAAI,EACdC,GAEA,GAAqB,iBAAVA,EACT,OAAOA,EAGT,MAAMC,IAAEA,EAAGC,IAAEA,GAAQF,EAEfG,EAAO,CACXzB,KAAMQ,EAAec,EAAMtB,MAC3BmB,MAAOD,EAAQQ,EAAA,CAAA,EACVJ,EAAMH,MACLI,GAAO,CAAEA,OACTC,GAAO,CAAEA,SAEfG,SAAUC,EAAYN,EAAMH,QAO9B,OAJAU,OAAOC,eAAeL,EAAM,WAAY,CACtCM,MAAO7B,OAAOC,IAAI,qBAGbsB,CACT,UC1BgBG,EACdT,GAEA,MAAMQ,SAAEA,GAAaR,EAErB,OAAKQ,EAIAK,MAAMC,QAAQN,GAIZA,EAASO,IAAIb,GAHX,CAACA,EAASM,IAJV,IAQX,CCbgB,SAAAQ,EACdC,EACAC,EAAQ,GAER,GAAoB,iBAATD,EACT,OAAOA,EAGT,MAAMX,EAAO,CACXzB,KAAMQ,EAAe4B,EAAKpC,MAC1BmB,MAAOD,EAASkB,EAAKjB,OACrBQ,SAAUU,EAAQC,EAASF,EAAKG,SAAUF,GAAST,EAAYQ,EAAKjB,QAOtE,OAJAU,OAAOC,eAAeL,EAAM,WAAY,CACtCM,MAAO7B,OAAOC,IAAI,qBAGbsB,CACT,CCxBgB,SAAAe,EACdJ,EACAC,GAEA,MAAuB,iBAATD,GAAuC,SAAlBA,EAAKK,SACpCJ,EACAA,EAAQ,CACd,CCJgB,SAAAC,EACdI,EACAL,EAAQ,GAER,OAAKK,EAIDV,MAAMC,QAAQS,GACTA,EAAMR,IAAKE,GAASD,EAAQC,EAAMI,EAAKJ,EAAMC,KAG/C,CAACF,EAAQO,EAAOF,EAAKE,EAAOL,KAP1B,IAQX,UCXgBM,EACdD,EACAL,EAAQ,GAER,OAAKK,EAIDV,MAAMC,QAAQS,GACTA,EAAMR,IAAKE,GACTQ,EAAeR,EAAMC,IAIzBO,EAAeF,EAAOL,GATpB,IAUX,CAEA,SAASO,EACPR,EACAC,EAAQ,GAER,IAAKD,EACH,OACD,KAED,MAAMS,EAAqC,CACzC7C,KAAMQ,EAAe4B,EAAKpC,MAC1BmB,MAAOD,EAASkB,EAAKjB,OACrBQ,SAAUW,EAASF,EAAKG,SAAUC,EAAKJ,EAAMC,KAO/C,OAJAR,OAAOC,eAAee,EAAa,WAAY,CAC7Cd,MAAO7B,OAAOC,IAAI,qBAGb0C,CACT"}